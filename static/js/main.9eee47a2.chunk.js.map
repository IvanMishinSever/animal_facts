{"version":3,"sources":["animals.js","App.js","reportWebVitals.js","index.js"],"names":["animals","dolphin","image","facts","lobster","starfish","background","className","alt","src","images","animal","push","onClick","displayFact","key","aria-label","role","e","aim","target","console","log","style","visibility","optionIndex","Math","floor","random","length","document","getElementById","innerHTML","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+MAAaA,G,KAAU,CACrBC,QAAS,CAEPC,MAAO,oCACPC,MAAO,CAAC,iEAAkE,mDAAoD,gCAEhIC,QAAS,CACPF,MAAO,oCACPC,MAAO,CAAC,kCAAmC,qCAAsC,4CAEnFE,SAAU,CACRH,MAAO,qCACPC,MAAO,CAAC,mCAAoC,uCAAwC,8CCRlFG,EAAa,yBAAKC,UAAU,aAAaC,IAAI,QAAQC,IAAI,oCAE3DC,EAAS,GAEb,IAAK,IAAMC,KAAUX,EACrBU,EAAOE,KAAK,yBAAKC,QAASC,EAAaC,IAAKJ,EAAQJ,UAAU,SAASC,IAAKG,EAAQF,IAAKT,EAAQW,GAAQT,MAAOc,aAAYL,EAAQM,KAAK,YAKzI,SAASH,EAAYI,GAIpB,IAAIC,EAAMD,EAAEE,OAAOZ,IACnBa,QAAQC,IAAIJ,EAAEE,QACbF,EAAEE,OAAOG,MAAMC,WAAa,SAC7B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW5B,EAAQmB,GAAKhB,MAAM0B,QAClER,QAAQC,IAAItB,EAAQmB,IACnBW,SAASC,eAAe,QAAQC,UAAYhC,EAAQmB,GAAKhB,MAAMsB,GA+BlDQ,MAZf,WACE,OACE,yBAAK1B,UAAU,OACMD,EACnB,uBAAG4B,GAAG,SACN,yBAAK3B,UAAU,WAAWG,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACvD,4BAAmB,oCCpCVyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCkBdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASC,eAAe,SAM1BI,M","file":"static/js/main.9eee47a2.chunk.js","sourcesContent":["export const animals = {\r\n  dolphin: {\r\n    // /animals_facts/ изначально требовалось без добаления этого пути\r\n    image: '/animals_facts/images/dolphin.jpg',\r\n    facts: ['Dolphins have been shown to give distinct names to each other!', 'Dolphins are known to display their own culture!', 'Dolphins have two stomachs!']\r\n  },\r\n  lobster: {\r\n    image: '/animals_facts/images/lobster.jpg',\r\n    facts: ['Lobsters taste with their legs!', 'Lobsters chew with their stomachs!', 'Lobsters can live as long as 100 years.']\r\n  },\r\n  starfish: {\r\n    image: '/animals_facts/images/starfish.jpg',\r\n    facts: ['Starfish can have up to 40 arms!', 'Starfish have no brain and no blood!', 'Starfish can regenerate their own arms!']\r\n  }\r\n};","import { animals } from './animals';\nimport React from 'react';\n//import ReactDOM from 'react-dom';\n\nconst background = <img className=\"background\" alt=\"ocean\" src=\"/animals_facts/images/ocean.jpg\"/>\nconst title = '';\nlet images = [];\n\nfor (const animal in animals) {\nimages.push(<img onClick={displayFact} key={animal} className='animal' alt={animal} src={animals[animal].image} aria-label={animal} role='button'/>\n);\n}\nconst showBackground = true;\n\nfunction displayFact(e) {\n // alert('Make myFunc the pFunc... omg that was horrible i am so sorry');\n //e.target\n //console.log(e);\n let aim = e.target.alt;\n console.log(e.target);\n  e.target.style.visibility = 'hidden';\n const optionIndex = Math.floor(Math.random() * animals[aim].facts.length);\n console.log(animals[aim]);\n  document.getElementById('fact').innerHTML = animals[aim].facts[optionIndex];\n  \n}\n\n//document.getElementById('fact').innerHTML = 'dsfdf';\n\n//console.log(images);\n// DONT WORK\n/* \n export  const animalFacts = (\n  <div>\n    {showBackground && background}\n    <p id='fact'></p>\n    <div className='animals'>{images[2]}{images[1]}{images[0]}</div>\n\n    <h1>{title === '' ?'Click an animal for a fun fact' : title}</h1>\n  </div>\n);\n*/\nfunction App() {\n  return (\n    <div className=\"App\">\n      {showBackground && background}\n      <p id='fact'></p>\n      <div className='animals'>{images[2]}{images[1]}{images[0]}</div>\n      <h1>{title === '' ?'Click an animal for a fun fact' : title}</h1>\n    \n    </div>\n  );\n}\n\nexport default App;\n\n//ReactDOM.render(animalFacts, document.getElementById('root'));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\n//import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App   from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  <React.StrictMode>\n  <App />\n</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}