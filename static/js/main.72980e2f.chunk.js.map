{"version":3,"sources":["animals.js","App.js","serviceWorker.js","index.js"],"names":["animals","dolphin","image","facts","lobster","starfish","background","className","alt","src","images","animal","push","onClick","displayFact","key","aria-label","role","e","aim","target","console","log","style","visibility","optionIndex","Math","floor","random","length","document","getElementById","innerHTML","animalFacts","id","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+LAAaA,G,KAAU,CACrBC,QAAS,CAEPC,MAAO,oCACPC,MAAO,CAAC,iEAAkE,mDAAoD,gCAEhIC,QAAS,CACPF,MAAO,oCACPC,MAAO,CAAC,kCAAmC,qCAAsC,4CAEnFE,SAAU,CACRH,MAAO,qCACPC,MAAO,CAAC,mCAAoC,uCAAwC,8C,gBCRlFG,EAAa,yBAAKC,UAAU,aAAaC,IAAI,QAAQC,IAAI,oCAE3DC,EAAS,GAEb,IAAK,IAAMC,KAAUX,EACrBU,EAAOE,KAAK,yBAAKC,QAASC,EAAaC,IAAKJ,EAAQJ,UAAU,SAASC,IAAKG,EAAQF,IAAKT,EAAQW,GAAQT,MAAOc,aAAYL,EAAQM,KAAK,YAKzI,SAASH,EAAYI,GAIpB,IAAIC,EAAMD,EAAEE,OAAOZ,IACnBa,QAAQC,IAAIJ,EAAEE,QACbF,EAAEE,OAAOG,MAAMC,WAAa,SAC7B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW5B,EAAQmB,GAAKhB,MAAM0B,QAClER,QAAQC,IAAItB,EAAQmB,IACnBW,SAASC,eAAe,QAAQC,UAAYhC,EAAQmB,GAAKhB,MAAMsB,GAMjEJ,QAAQC,IAAIZ,GAEL,IAAMuB,EACX,6BACqB3B,EACnB,uBAAG4B,GAAG,SACN,yBAAK3B,UAAU,WAAWG,EAAO,GAAIA,EAAO,GAAIA,EAAO,IAEvD,4BAAmB,mCCzBHyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOR,EACdH,SAASC,eAAe,SD4HpB,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.72980e2f.chunk.js","sourcesContent":["export const animals = {\r\n  dolphin: {\r\n    // /animals_facts/ изначально требовалось без добаления этого пути\r\n    image: '/animals_facts/images/dolphin.jpg',\r\n    facts: ['Dolphins have been shown to give distinct names to each other!', 'Dolphins are known to display their own culture!', 'Dolphins have two stomachs!']\r\n  },\r\n  lobster: {\r\n    image: '/animals_facts/images/lobster.jpg',\r\n    facts: ['Lobsters taste with their legs!', 'Lobsters chew with their stomachs!', 'Lobsters can live as long as 100 years.']\r\n  },\r\n  starfish: {\r\n    image: '/animals_facts/images/starfish.jpg',\r\n    facts: ['Starfish can have up to 40 arms!', 'Starfish have no brain and no blood!', 'Starfish can regenerate their own arms!']\r\n  }\r\n};","import { animals } from './animals';\nimport React from 'react';\n//import ReactDOM from 'react-dom';\n\nconst background = <img className=\"background\" alt=\"ocean\" src=\"/animals_facts/images/ocean.jpg\"/>\nconst title = '';\nlet images = [];\n\nfor (const animal in animals) {\nimages.push(<img onClick={displayFact} key={animal} className='animal' alt={animal} src={animals[animal].image} aria-label={animal} role='button'/>\n);\n}\nconst showBackground = true;\n\nfunction displayFact(e) {\n // alert('Make myFunc the pFunc... omg that was horrible i am so sorry');\n //e.target\n //console.log(e);\n let aim = e.target.alt;\n console.log(e.target);\n  e.target.style.visibility = 'hidden';\n const optionIndex = Math.floor(Math.random() * animals[aim].facts.length);\n console.log(animals[aim]);\n  document.getElementById('fact').innerHTML = animals[aim].facts[optionIndex];\n  \n}\n\n//document.getElementById('fact').innerHTML = 'dsfdf';\n\nconsole.log(images);\n\nexport const animalFacts = (\n  <div>\n    {showBackground && background}\n    <p id='fact'></p>\n    <div className='animals'>{images[2]}{images[1]}{images[0]}</div>\n\n    <h1>{title === '' ?'Click an animal for a fun fact' : title}</h1>\n  </div>\n);\n\n//ReactDOM.render(animalFacts, document.getElementById('root'));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { animalFacts } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(animalFacts,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}